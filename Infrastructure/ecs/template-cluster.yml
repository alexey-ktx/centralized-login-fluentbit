AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.micro, t2.small, t2.medium]
    ConstraintDescription: Please choose a valid instance type.
# Mappings:
#   SubnetConfig:
#     PublicOne:
#       CIDR: '172.31.17.0/20'
#     PublicTwo:
#       CIDR: '172.31.18.0/20'
Resources:
  
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  # Two public subnets, where containers can have public IP addresses
  # PublicSubnetOne:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone:
  #        Fn::Select:
  #        - 0
  #        - Fn::GetAZs: {Ref: 'AWS::Region'}
  #     VpcId: vpc-cf7068a9
  #     CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
  #     MapPublicIpOnLaunch: true
  
  # PublicSubnetTwo:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone:
  #        Fn::Select:
  #        - 1
  #        - Fn::GetAZs: {Ref: 'AWS::Region'}
  #     VpcId: vpc-cf7068a9
  #     CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
  #     MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
    
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-cf7068a9
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: igw-887461ef
  
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-2581167f
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-4c082d04
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: Testing-Env-Cluster

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - subnet-2581167f
        - subnet-4c082d04
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: 
        - Fn::ImportValue: EcsHostSecurityGroup
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap curl
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
          
          ECS_CLUSTER=Testing-Env-Cluster
          ECS_ENABLE_SPOT_INSTANCE_DRAINING=true
          ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=30m
          EOL

          #Install ssm-agent
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - Fn::ImportValue: EC2Role

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: ClusterName
  
  # PublicSubnetOne:
  #   Description: Public subnet one
  #   Value: !Ref 'PublicSubnetOne'
  #   Export:
  #     Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  
  # PublicSubnetTwo:
  #   Description: Public subnet two
  #   Value: !Ref 'PublicSubnetTwo'
  #   Export:
  #     Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  